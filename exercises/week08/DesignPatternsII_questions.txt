(Definitions are largely taken from the original Design Patterns, Gang of Four
book)

Q1(a)
The Strategy Design Pattern involves defining a family of algorithms,
encapsulating each one, and making them interchangeable. The algorithm can then
vary independently from clients that use it.

The implementation can be selected dynamically at runtime.

Clients do not need to know how operations are implemented.


Q1(b)
The Design Patterns book suggests it is appropriate to use the Strategy pattern
when:

 - A group of related classes differ only in their behaviours

 - Different versions of an algorithm are required

 - A class defines many behaviours in multiple conditional statements. Related
 conditional branches can be moved into their own Strategy class

 e.g. different sorting algorithms for different types of data,
 different parsers, etc.


Q3
It is appropriate to use an Abstract Factory Pattern when:

 - a system should be independent of how its products are created, composed and
 represented

 - a system should be configured with one of multiple families of products

 - a family of related product objects is designed to be used together and you
 need to enforce this constraint

 - you want to provide a class library of products and you want to reveal just
 their interfaces, not their implementations

 An interface is provided for creating families of related or dependent objects
 without specifying their concrete classes


Q5
“In general, the details of object construction, such as instantiating and
initialising the components that comprise the object, are kept within the
object, often as part of its constructor.”

Comment on this statement with reference to modularity and construction bloat.

The construction of complex objects can get very unwieldy with many different
elements to initialise and instantiate, particularly if a variety of different
representations are required.

The Builder pattern separates the construction of a complex object from its
representation, so that the same construction process can create different
representations.


Q7(a)
The Facade Pattern provides a unified interface to a set of interfaces in
subsystem. Facade defines a higher-level interface that makes the subsystem
easier to use.

(b)
You would use the Facade pattern when:

 - you wanted to provide a simple interface to a complex subsystem.

 - there are many dependencies between clients and the implementation classes of
 an abstraction. Introduction of a facade will decouple the subsystem from clients
 and other subsystems, promoting subsystem independence and portability.

 - you want to layer your subsystems. You use a facade to define an entry point
 to each subsystem level.


Q9
You should make use of the Bridge Design Pattern when:

 - you want to avoid a permanent binding between an abstraction and its
 implementation.


 - both the abstractions and their implementtions should be extensible by
 subclassing. In this case the Bridge pattern lets you combine the different
 abstractions and implementations and extend them independently.

 - changes in the implementation of an abstraction should have no impact on
 clients.

 - you want to share an implementation among multiple objects and this fact
 should be hidden from the client.


The intent of the Bridge pattern is that an abstraction is decoupled from its
abstraction so the two can vary independently.


Q11
(a)
The Composite Pattern composes objects into tree structures to represent
part-whole hierarchies. Clients can treat individual objects and compositions of
objects uniformly.

(b)
You would use the Composite pattern when:

- you want to represent part-whole hierarchies of objects

- you want clients to be able to ignore the difference between compositions of
objects and individual objects. Clients will treat all objects in the composite
structure uniformly.

(c)
The 4 participants of the pattern are:
 - component, leaf, composite and client.


